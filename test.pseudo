# Comprehensive test script for basic2 language

# Test variable assignment and arithmetic operations
output "=== Testing variable assignment and arithmetic ==="
NUM = 10
output "NUM =", NUM

OUTPUT = NUM + 5
output "NUM + 5 =", OUTPUT

OUTPUT = NUM - 3
output "NUM - 3 =", OUTPUT

OUTPUT = NUM * 2
output "NUM * 2 =", OUTPUT

OUTPUT = NUM / 2
output "NUM / 2 =", OUTPUT

OUTPUT = NUM % 3
output "NUM % 3 =", OUTPUT

OUTPUT = NUM ^ 2
output "NUM ^ 2 =", OUTPUT

# Test comparison operators
output "=== Testing comparison operators ==="
output "10 == 10:", 10 == 10
output "10 != 5:", 10 != 5
output "10 > 5:", 10 > 5
output "5 < 10:", 5 < 10
output "10 >= 10:", 10 >= 10
output "5 <= 10:", 5 <= 10

# Test logical operators
output "=== Testing logical operators ==="
output "true and true:", true and true
output "true and false:", true and false
output "true or false:", true or false
output "false or false:", false or false
output "not true:", not true
output "not false:", not false

# Test if-elif-else statements
output "=== Testing if-elif-else statements ==="
X = 15

if X < 10 then
    output "X is less than 10"
else if X < 20 then
    output "X is between 10 and 20"
else
    output "X is 20 or greater"
end if

# Test single-line if statement
if X == 15 then output "X equals 15!"

# Test loop from...to
output "=== Testing loop from...to ==="
output "Counting from 1 to 5:"
loop i from 1 to 6 then
    output i
end loop

# Test loop with list collection
output "Creating a list with loop:"
NUMBERS = loop i from 1 to 6 then
    i * i
end loop
output NUMBERS

# Test while loop
output "=== Testing while loop ==="
COUNT = 0
loop while COUNT < 5 then
    output "While loop count:", COUNT
    COUNT = COUNT + 1
end loop

# Test break and continue
output "=== Testing break and continue ==="
loop i from 0 to 10 then
    if i == 3 then
        output "Skipping 3"
        continue
    end if
    if i == 7 then
        output "Breaking at 7"
        break
    end if
    output "Loop value:", i
end loop

# Test string operations
output "=== Testing strings ==="
STR = "Hello, world!"
output STR
output "Length:", STR.length()
output "Uppercase:", STR.upper()
output "Lowercase:", STR.lower()

# Test string concatenation
output "String + String:", "Hello, " + "world!"

# Test string multiplication
output "String * 3:", "abc" * 3

# Test string split
WORDS = STR.split()
output "Split result:", WORDS

# Test list operations
output "=== Testing lists ==="
LIST = [1, 2, 3, 4, 5]
output "Original list:", LIST
output "List length:", LIST.length()

# Test list access
output "LIST[2] =", LIST[2]

# Test list append
LIST.append(6)
output "After append(6):", LIST

# Test list pop
POPPED = LIST.pop()
output "Popped value:", POPPED
output "After pop():", LIST

# Test list with method
LIST.pop(2) # Remove element at index 2
output "After pop(2):", LIST

# Test functions
output "=== Testing functions ==="
method add(a, b)
    return a + b
end method

output "add(5, 3) =", add(5, 3)

# Test function with multiple statements
method calculate(x)
    y = x * 2
    z = y + 10
    return z
end method

output "calculate(5) =", calculate(5)

# Test recursive function
method factorial(n)
    if n <= 1 then
        return 1
    else
        return n * factorial(n-1)
    end if
end method

output "factorial(5) =", factorial(5)

# Test type conversions
output "=== Testing type conversions ==="
S = "123"
N = int(S)
output "String to int:", N, "Type is number:", is_number(N)

N = 456
S = str(N)
output "Number to string:", S, "Type is string:", is_string(S)

# Test built-in functions
output "=== Testing built-in functions ==="
output "PI value:", math_PI

# Test various type checks
output "is_number(5):", is_number(5)
output "is_string('hello'):", is_string("hello")
output "is_list([1,2,3]):", is_list([1,2,3])
output "is_function(add):", is_function(add)

# Test method calling with dot notation
output "=== Testing method calls with dot notation ==="
TEXT = "a,b,c,d"
PARTS = TEXT.split(",")
output "Split with comma:", PARTS

NUMBER = 123.456
STR_NUM = NUMBER.to_string()
output "Number converted to string:", STR_NUM

# Final output
output "=== All tests completed ==="